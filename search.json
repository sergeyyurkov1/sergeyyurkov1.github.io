[
  {
    "objectID": "certificates.html",
    "href": "certificates.html",
    "title": "Certificates",
    "section": "",
    "text": "Scientific Computing with Python \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Data Analysis with Python \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Machine Learning with Python \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Analyzing Social Media Data in Python \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Writing Efficient R Code \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Intermediate Google Sheets \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Exploratory Data Analysis in R \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Intermediate R \n      \n    \n    \n      \n    \n    \n  \n  \n\n\nNo matching items"
  },
  {
    "objectID": "projects1/welcome/index.html",
    "href": "projects1/welcome/index.html",
    "title": "Project 1",
    "section": "",
    "text": "Project 1"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yurkov Sergey (谢尔盖)",
    "section": "",
    "text": "Computational social scientist, data analyst, and developer. PhD student. I work with Python, Huawei Cangjie, SQL, HTML/CSS & JavaScript.\n\n⭐⭐⭐⭐⭐ “absolutely professional work big thanks again for dedicated support” – arbeitauslagern, Germany\n⭐⭐⭐⭐⭐ “Professional work big thanks for your support. The result is even better than expected. He really knows what he is doing.” – arbeitauslagern, Germany"
  },
  {
    "objectID": "projects/medical_data_visualizer.html",
    "href": "projects/medical_data_visualizer.html",
    "title": "Medical Data Visualizer",
    "section": "",
    "text": "Installing the dependencies\n\npip install pandas seaborn\n\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Import data\ndf = pd.read_csv(\"data/medical_examination.csv\")\n\ndf\n\n\n\n\n\n\n\n\nid\nage\ngender\nheight\nweight\nap_hi\nap_lo\ncholesterol\ngluc\nsmoke\nalco\nactive\ncardio\n\n\n\n\n0\n0\n18393\n2\n168\n62.0\n110\n80\n1\n1\n0\n0\n1\n0\n\n\n1\n1\n20228\n1\n156\n85.0\n140\n90\n3\n1\n0\n0\n1\n1\n\n\n2\n2\n18857\n1\n165\n64.0\n130\n70\n3\n1\n0\n0\n0\n1\n\n\n3\n3\n17623\n2\n169\n82.0\n150\n100\n1\n1\n0\n0\n1\n1\n\n\n4\n4\n17474\n1\n156\n56.0\n100\n60\n1\n1\n0\n0\n0\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n69995\n99993\n19240\n2\n168\n76.0\n120\n80\n1\n1\n1\n0\n1\n0\n\n\n69996\n99995\n22601\n1\n158\n126.0\n140\n90\n2\n2\n0\n0\n1\n1\n\n\n69997\n99996\n19066\n2\n183\n105.0\n180\n90\n3\n1\n0\n1\n0\n1\n\n\n69998\n99998\n22431\n1\n163\n72.0\n135\n80\n1\n2\n0\n0\n0\n1\n\n\n69999\n99999\n20540\n1\n170\n72.0\n120\n80\n2\n1\n0\n0\n1\n0\n\n\n\n\n70000 rows × 13 columns\n\n\n\n\nprint(df.describe())\nprint(df.info())\n\n                 id           age        gender        height        weight  \\\ncount  70000.000000  70000.000000  70000.000000  70000.000000  70000.000000   \nmean   49972.419900  19468.865814      1.349843    164.359229     74.205690   \nstd    28851.302323   2467.251667      0.477253      8.210126     14.395757   \nmin        0.000000  10798.000000      1.000000     55.000000     10.000000   \n25%    25006.750000  17664.000000      1.000000    159.000000     65.000000   \n50%    50001.500000  19703.000000      1.000000    165.000000     72.000000   \n75%    74889.250000  21327.000000      2.000000    170.000000     82.000000   \nmax    99999.000000  23713.000000      3.000000    250.000000    200.000000   \n\n              ap_hi         ap_lo   cholesterol          gluc         smoke  \\\ncount  70000.000000  70000.000000  70000.000000  70000.000000  70000.000000   \nmean     128.817286     96.630414      1.366871      1.226457      0.088129   \nstd      154.011419    188.472530      0.680250      0.572270      0.283484   \nmin     -150.000000    -70.000000      1.000000      1.000000      0.000000   \n25%      120.000000     80.000000      1.000000      1.000000      0.000000   \n50%      120.000000     80.000000      1.000000      1.000000      0.000000   \n75%      140.000000     90.000000      2.000000      1.000000      0.000000   \nmax    16020.000000  11000.000000      3.000000      3.000000      1.000000   \n\n               alco        active        cardio  \ncount  70000.000000  70000.000000  70000.000000  \nmean       0.053771      0.803729      0.499700  \nstd        0.225568      0.397179      0.500003  \nmin        0.000000      0.000000      0.000000  \n25%        0.000000      1.000000      0.000000  \n50%        0.000000      1.000000      0.000000  \n75%        0.000000      1.000000      1.000000  \nmax        1.000000      1.000000      1.000000  \n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 70000 entries, 0 to 69999\nData columns (total 13 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   id           70000 non-null  int64  \n 1   age          70000 non-null  int64  \n 2   gender       70000 non-null  int64  \n 3   height       70000 non-null  int64  \n 4   weight       70000 non-null  float64\n 5   ap_hi        70000 non-null  int64  \n 6   ap_lo        70000 non-null  int64  \n 7   cholesterol  70000 non-null  int64  \n 8   gluc         70000 non-null  int64  \n 9   smoke        70000 non-null  int64  \n 10  alco         70000 non-null  int64  \n 11  active       70000 non-null  int64  \n 12  cardio       70000 non-null  int64  \ndtypes: float64(1), int64(12)\nmemory usage: 6.9 MB\nNone\n\n\n\n# Add \"overweight\" column\ndf[\"overweight\"] = np.where((df[\"weight\"] / (df[\"height\"] / 100) ** 2) &gt; 25, 1, 0)\n\n# Normalize data by making 0 always good and 1 always bad. If the value of \"cholesterol\" or \"gluc\" is 1, make the value 0. If the value is more than 1, make the value 1.\ndf[\"cholesterol\"] = np.where(df[\"cholesterol\"] == 1, 0, 1)\ndf[\"gluc\"] = np.where(df[\"gluc\"] == 1, 0, 1)\n\ndf\n\n\n\n\n\n\n\n\nid\nage\ngender\nheight\nweight\nap_hi\nap_lo\ncholesterol\ngluc\nsmoke\nalco\nactive\ncardio\noverweight\n\n\n\n\n0\n0\n18393\n2\n168\n62.0\n110\n80\n0\n0\n0\n0\n1\n0\n0\n\n\n1\n1\n20228\n1\n156\n85.0\n140\n90\n1\n0\n0\n0\n1\n1\n1\n\n\n2\n2\n18857\n1\n165\n64.0\n130\n70\n1\n0\n0\n0\n0\n1\n0\n\n\n3\n3\n17623\n2\n169\n82.0\n150\n100\n0\n0\n0\n0\n1\n1\n1\n\n\n4\n4\n17474\n1\n156\n56.0\n100\n60\n0\n0\n0\n0\n0\n0\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n69995\n99993\n19240\n2\n168\n76.0\n120\n80\n0\n0\n1\n0\n1\n0\n1\n\n\n69996\n99995\n22601\n1\n158\n126.0\n140\n90\n1\n1\n0\n0\n1\n1\n1\n\n\n69997\n99996\n19066\n2\n183\n105.0\n180\n90\n1\n0\n0\n1\n0\n1\n1\n\n\n69998\n99998\n22431\n1\n163\n72.0\n135\n80\n0\n1\n0\n0\n0\n1\n1\n\n\n69999\n99999\n20540\n1\n170\n72.0\n120\n80\n1\n0\n0\n0\n1\n0\n0\n\n\n\n\n70000 rows × 14 columns\n\n\n\n\n# Draw Categorical Plot\ndef draw_cat_plot():\n    # Create DataFrame for cat plot using `pd.melt` using just the values from \"cholesterol\", \"gluc\", \"smoke\", \"alco\", \"active\", and \"overweight\".\n    df_cat = pd.melt(\n        df,\n        id_vars=[\"cardio\"],\n        value_vars=[\"cholesterol\", \"gluc\", \"smoke\", \"alco\", \"active\", \"overweight\"],\n    )\n\n    # Group and reformat the data to split it by \"cardio\". Show the counts of each feature. You will have to rename one of the columns for the catplot to work correctly.\n    # Solution found at https://forum.freecodecamp.org/t/medical-data-visualizer-confusion/410074/44\n    df_cat = (\n        df_cat.groupby([\"cardio\", \"variable\", \"value\"], as_index=False)\n        .size()\n        .rename(columns={\"size\": \"total\"})\n    )\n\n    # Draw the catplot with \"sns.catplot()\"\n    fig = sns.catplot(\n        data=df_cat, x=\"variable\", y=\"total\", col=\"cardio\", hue=\"value\", kind=\"bar\"\n    ).fig\n\n    # fig.savefig(\"catplot.png\")\n    return fig\n\n\nplt.show(draw_cat_plot())\n\n\n\n\n\n\n\n\n\n# Draw Heat Map\ndef draw_heat_map():\n    # Clean the data\n    df_heat = df.loc[\n        (df[\"ap_lo\"] &lt;= df[\"ap_hi\"])\n        & (df[\"height\"] &gt;= df[\"height\"].quantile(0.025))\n        & (df[\"height\"] &lt;= df[\"height\"].quantile(0.975))\n        & (df[\"weight\"] &gt;= df[\"weight\"].quantile(0.025))\n        & (df[\"weight\"] &lt;= df[\"weight\"].quantile(0.975))\n    ]\n\n    # Calculate the correlation matrix\n    corr = df_heat.corr()\n\n    # Generate a mask for the upper triangle\n    # Hint found at https://www.geeksforgeeks.org/how-to-create-a-triangle-correlation-heatmap-in-seaborn-python/\n    mask = np.triu(corr)\n\n    # Set up the matplotlib figure\n    fig, ax = plt.subplots()\n\n    # Draw the heatmap with \"sns.heatmap()\"\n    sns.heatmap(corr, mask=mask, ax=ax, square=True, annot=True, fmt=\".1f\")\n\n    fig.savefig(\"heatmap.png\")\n    return fig\n\n\nplt.show(draw_heat_map())"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Notes",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Page View Time Series Visualizer\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMedical Data Visualizer\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 1, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "draft: true\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 1, 2024\n\n\nYurkov Sergey\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Projects & Software",
    "section": "",
    "text": "Neural Network from Scratch in Cangjie \n      \n    \n    \n      \n    \n    \n    \n      Recreation of an artificial neural network described in the book Neural Networks from Scratch by Harrison Kinsley in Cangjie instead of Python.\n    \n    \n  \n  \n  \n    \n      \n        Numcj - Numpy alternative for Cangjie \n      \n    \n    \n      \n    \n    \n    \n      基于matrix4cj numcj重新创建numpy中的函数和API\n    \n    \n  \n  \n  \n    \n      \n        Vaccination Goal Visualizer \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        DistroWatch Data Explorer \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Python OS \n        \n          \n        \n        \n      \n    \n    \n      \n    \n    \n    \n      This project is a spiritual successor to Snakeware, an attempt to create an OS similar to Commodore KERNAL but running Python instead of BASIC programming language. Runs TUI written with Textual inspired by Sevastolink terminals in the game Alien Isolation and other games such as Atomic Heart.\n    \n    \n  \n  \n  \n    \n      \n        Medical Data Visualizer \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        Page View Time Series Visualizer \n      \n    \n    \n      \n    \n    \n  \n  \n  \n    \n      \n        File Copier \n      \n    \n    \n      \n    \n    \n    \n      Native app written in Python and web GUI to search and copy/move files from nested folders into a single folder; useful for cleaning old WeChat/QQ backups that may have important files that you want to save. I didn't find any program that could do that, so I wrote my own.\n    \n    \n  \n  \n  \n    \n      \n        PDF Summarizer & Renamer \n      \n    \n    \n      \n    \n    \n    \n      Briefly summarizes PDFs in German and English and renames the files accordingly. Uses 3 different models from fastest and least accurate to slowest and most accurate (T5 transformer); can handle individual files as well as batch-process multiple documents.\n    \n    \n  \n  \n  \n    \n      \n        MarktGuru Scraper \n      \n    \n    \n      \n    \n    \n    \n      Native app written in Python and web GUI that searches for lowest price products in the shopping list in German supermarkets and prepares a detailed report.Main features:- ZIP code selection- System to filter out unwanted results- Blacklist function to assist the filter- Excel export- The ability to mark lowest price either by the item searched or by product name- Responsive UI\n    \n    \n  \n  \n  \n    \n      \n        Custom document management system \n      \n    \n    \n      \n    \n    \n    \n      OCR application with the ability to identify and repair damaged and encrypted files -- tested on thousands of archived documents.Main features:- Tesseract engine- OCR settings panel- Blockchain that keeps track of file changes- Log panel for debugging- CRON-like scheduling- Ability to mark files for redoing OCR with another method on the next run- Desktop+Mobile UI\n    \n    \n  \n  \n  \n    \n      \n        ADS-B Tracker \n      \n    \n    \n      \n    \n    \n    \n      Simple flight tracker and weather radar\n    \n    \n  \n  \n  \n    \n      \n        Drawing for Two \n      \n    \n    \n      \n    \n    \n    \n      A shared drawing app for two... maybe even three\n    \n    \n  \n  \n  \n    \n      \n        APIs \n      \n    \n    \n      \n    \n    \n    \n      Collection of data endpoints for my projects\n    \n    \n  \n  \n  \n    \n      \n        Telegram bot \n      \n    \n    \n      \n    \n    \n    \n      A multi-tool for my internet needs\n    \n    \n  \n  \n\n\nNo matching items"
  },
  {
    "objectID": "projects/time_series_visualizer.html",
    "href": "projects/time_series_visualizer.html",
    "title": "Page View Time Series Visualizer",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom pandas.plotting import register_matplotlib_converters\n\nregister_matplotlib_converters()\n\n# Import data (Make sure to parse dates. Consider setting index column to \"date\".)\ndf = pd.read_csv(\"data/fcc-forum-pageviews.csv\")\n\ndf.head()\n\n\n\n\n\n\n\n\ndate\nvalue\n\n\n\n\n0\n2016-05-09\n1201\n\n\n1\n2016-05-10\n2329\n\n\n2\n2016-05-11\n1716\n\n\n3\n2016-05-12\n10539\n\n\n4\n2016-05-13\n6933\n\n\n\n\n\n\n\n\nprint(df.describe())\nprint(df.info())\n\n\n# Clean data\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\n\ndf = df.loc[\n    (df[\"value\"] &gt;= df[\"value\"].quantile(0.025))\n    & (df[\"value\"] &lt;= df[\"value\"].quantile(0.975))\n]\n\ndf\n\n\n\n\n\n\n\n\ndate\nvalue\n\n\n\n\n10\n2016-05-19\n19736\n\n\n17\n2016-05-26\n18060\n\n\n18\n2016-05-27\n19997\n\n\n19\n2016-05-28\n19044\n\n\n20\n2016-05-29\n20325\n\n\n...\n...\n...\n\n\n1294\n2019-11-24\n138875\n\n\n1299\n2019-11-29\n171584\n\n\n1300\n2019-11-30\n141161\n\n\n1301\n2019-12-01\n142918\n\n\n1303\n2019-12-03\n158549\n\n\n\n\n1238 rows × 2 columns\n\n\n\n\ndef draw_line_plot():\n    df_line = df.copy()\n    df_line.reset_index(inplace=True)\n\n    # Draw line plot\n    fig, ax = plt.subplots()\n    ax.plot(df_line[\"date\"], df_line[\"value\"])\n    ax.set_title(\"Daily freeCodeCamp Forum Page Views 5/2016-12/2019\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Page Views\")\n\n    # fig.savefig(\"line_plot.png\")\n    return fig\n\n\nplt.show(draw_line_plot())\n\n\n\n\n\n\n\n\n\ndef draw_bar_plot():\n    # Copy and modify data for monthly bar plot\n    df_bar = df.copy()\n    df_bar.reset_index(inplace=True)\n\n    df_bar[\"year\"] = df_bar[\"date\"].dt.year\n    df_bar[\"month\"] = df_bar[\"date\"].dt.month_name()\n    df_bar[\"day\"] = df_bar[\"date\"].dt.day\n\n    df_bar = df_bar.groupby([\"year\", \"month\"], as_index=False)[\"value\"].mean()\n\n    # Draw bar plot\n    fig, ax = plt.subplots()\n\n    ax = sns.barplot(data=df_bar, x=\"year\", y=\"value\", hue=\"month\")\n\n    ax.set_xlabel(\"Years\")\n    ax.set_ylabel(\"Average Page Views\")\n\n    sorted_labels = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ]\n\n    # This way labels always default to black color\n    # ax.legend(sorted_labels, title=\"Months\", loc=\"upper left\")\n\n    # Workaround for unsorted labels\n    # Hint found at https://www.c-sharpcorner.com/article/a-complete-python-seaborn-tutorial/\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles[:], sorted_labels, title=\"Months\")\n\n    # fig.savefig(\"bar_plot.png\")\n    return fig\n\n\nplt.show(draw_bar_plot())\n\n\n\n\n\n\n\n\n\ndef draw_box_plot():\n    # Prepare data for box plots (this part is done!)\n    df_box = df.copy()\n    df_box.reset_index(inplace=True)\n\n    df_box[\"year\"] = [d.year for d in df_box.date]\n    df_box[\"month\"] = [d.strftime(\"%b\") for d in df_box.date]\n\n    sns.set(rc={\"figure.figsize\": (10, 8)})\n\n    # Draw box plots (using Seaborn)\n    fig, ax = plt.subplots(1, 2)\n\n    sns.boxplot(data=df_box, ax=ax[0], x=\"year\", y=\"value\")\n    ax[0].set_xlabel(\"Year\")\n    ax[0].set_ylabel(\"Page Views\")\n    ax[0].set_title(\"Year-wise Box Plot (Trend)\")\n\n    sns.boxplot(\n        data=df_box,\n        ax=ax[1],\n        x=\"month\",\n        order=[\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\",\n        ],\n        y=\"value\",\n    )\n    ax[1].set_xlabel(\"Month\")\n    ax[1].set_ylabel(\"Page Views\")\n    ax[1].set_title(\"Month-wise Box Plot (Seasonality)\")\n\n    # fig.savefig(\"box_plot.png\")\n    return fig\n\n\nplt.show(draw_box_plot())"
  },
  {
    "objectID": "projects1.html",
    "href": "projects1.html",
    "title": "Projects",
    "section": "",
    "text": "Page View Time Series Visualizer\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\nJan 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMedical Data Visualizer\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\nJan 1, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/Untitled-1.html",
    "href": "blog/Untitled-1.html",
    "title": "draft: true",
    "section": "",
    "text": "draft: true\n\n1 + 1\n\n2"
  }
]